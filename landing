import React, { useState } from 'react';
import { Upload, Play, FileText, Zap, CheckCircle, Loader } from 'lucide-react';

export default function ParadigmScreeningInterface() {
  const [documents, setDocuments] = useState([]);
  const [isProcessing, setIsProcessing] = useState(false);
  const [output, setOutput] = useState('');
  const [isDragOver, setIsDragOver] = useState(false);

  const handleFileUpload = (files) => {
    const newFiles = Array.from(files).slice(0, 2 - documents.length);
    setDocuments(prev => [...prev, ...newFiles]);
  };

  const handleDragOver = (e) => {
    e.preventDefault();
    setIsDragOver(true);
  };

  const handleDragLeave = (e) => {
    e.preventDefault();
    setIsDragOver(false);
  };

  const handleDrop = (e) => {
    e.preventDefault();
    setIsDragOver(false);
    handleFileUpload(e.dataTransfer.files);
  };

  const removeDocument = (index) => {
    setDocuments(prev => prev.filter((_, i) => i !== index));
  };

  const launchWorkflow = async () => {
    if (documents.length < 2) {
      alert('Please upload 2 documents before launching the workflow.');
      return;
    }

    setIsProcessing(true);
    setOutput('');

    try {
      const formData = new FormData();
      documents.forEach((doc, index) => {
        formData.append(`document${index + 1}`, doc);
      });

      const response = await fetch('/api/process-documents', {
        method: 'POST',
        body: formData,
        headers: {
          'Authorization': `Bearer ${process.env.PARADIGM_API_KEY}`
        }
      });

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      const result = await response.text();
      setOutput(result);
    } catch (error) {
      setOutput(`Error processing documents: ${error.message}`);
    } finally {
      setIsProcessing(false);
    }
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-gray-50 via-white to-gray-100 text-gray-900">
      {/* Animated background particles */}
      <div className="absolute inset-0 overflow-hidden">
        <div className="absolute w-96 h-96 bg-blue-500/10 rounded-full blur-3xl animate-pulse -top-20 -left-20"></div>
        <div className="absolute w-96 h-96 bg-gray-400/10 rounded-full blur-3xl animate-pulse -bottom-20 -right-20 animation-delay-2000"></div>
        <div className="absolute w-64 h-64 bg-blue-400/15 rounded-full blur-3xl animate-pulse top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 animation-delay-4000"></div>
      </div>

      <div className="relative z-10 container mx-auto px-6 py-8">
        {/* Header */}
        <header className="text-center mb-12">
          <div className="flex justify-between items-center mb-8">
            <div className="w-32 h-20 bg-gradient-to-r from-gray-100 to-white rounded-lg border border-gray-300 flex items-center justify-center backdrop-blur-sm shadow-lg">
              <span className="text-xs font-medium text-gray-700">LightOn Logo</span>
            </div>
            
            <h1 className="text-4xl md:text-6xl font-bold bg-gradient-to-r from-blue-600 via-blue-500 to-blue-700 bg-clip-text text-transparent">
              Paradigm Screening Use Case
            </h1>
            
            <div className="w-32 h-20 bg-gradient-to-r from-white to-gray-100 rounded-lg border border-gray-300 flex items-center justify-center backdrop-blur-sm shadow-lg">
              <span className="text-xs font-medium text-gray-700">YBAK Logo</span>
            </div>
          </div>
          
          <p className="text-lg md:text-xl text-gray-600 max-w-4xl mx-auto leading-relaxed">
            This is a demonstration of <span className="text-blue-600 font-semibold">Paradigm's capabilities and adaptability</span>, 
            designed to drive value creation by adapting to <span className="text-gray-800 font-semibold">YBAK specific needs</span> 
            through intelligent document analysis and processing.
          </p>
        </header>

        {/* Workflow Description */}
        <div className="mb-12 bg-white/90 backdrop-blur-lg rounded-2xl p-8 border border-gray-200 shadow-xl">
          <h2 className="text-2xl font-bold mb-6 flex items-center gap-3 text-gray-800">
            <Zap className="text-blue-500" size={28} />
            Workflow Overview
          </h2>
          <div className="grid md:grid-cols-3 gap-6 text-center">
            <div className="p-6 bg-gray-50 rounded-xl border border-gray-200 shadow-sm hover:shadow-md transition-shadow">
              <Upload className="mx-auto mb-3 text-blue-500" size={32} />
              <h3 className="font-semibold text-gray-800 mb-2">Document Upload</h3>
              <p className="text-sm text-gray-600">Upload two documents for comprehensive analysis and comparison</p>
            </div>
            <div className="p-6 bg-blue-50 rounded-xl border border-blue-200 shadow-sm hover:shadow-md transition-shadow">
              <Play className="mx-auto mb-3 text-blue-600" size={32} />
              <h3 className="font-semibold text-blue-800 mb-2">AI Processing</h3>
              <p className="text-sm text-gray-600">Advanced algorithms analyze content, extract insights, and generate recommendations</p>
            </div>
            <div className="p-6 bg-gray-900 rounded-xl border border-gray-700 shadow-sm hover:shadow-md transition-shadow">
              <CheckCircle className="mx-auto mb-3 text-white" size={32} />
              <h3 className="font-semibold text-white mb-2">Results Delivery</h3>
              <p className="text-sm text-gray-300">Receive detailed analysis with actionable insights tailored to your needs</p>
            </div>
          </div>
        </div>

        {/* Document Upload Section */}
        <div className="mb-8">
          <div 
            className={`border-2 border-dashed rounded-2xl p-8 text-center transition-all duration-300 backdrop-blur-sm ${
              isDragOver 
                ? 'border-blue-500 bg-blue-50' 
                : documents.length >= 2 
                  ? 'border-green-500 bg-green-50' 
                  : 'border-gray-300 bg-white/80 hover:border-blue-400 hover:bg-blue-50/50'
            }`}
            onDragOver={handleDragOver}
            onDragLeave={handleDragLeave}
            onDrop={handleDrop}
          >
            <Upload className={`mx-auto mb-4 ${isDragOver ? 'text-blue-500' : documents.length >= 2 ? 'text-green-500' : 'text-gray-400'}`} size={48} />
            <h3 className="text-xl font-semibold mb-2 text-gray-800">
              {documents.length >= 2 ? 'Documents Ready' : `Upload Documents (${documents.length}/2)`}
            </h3>
            <p className="text-gray-600 mb-4">Drag and drop files here or click to browse</p>
            
            <input
              type="file"
              multiple
              onChange={(e) => handleFileUpload(e.target.files)}
              className="hidden"
              id="file-upload"
              accept=".pdf,.doc,.docx,.txt"
              disabled={documents.length >= 2}
            />
            
            {documents.length < 2 && (
              <label 
                htmlFor="file-upload" 
                className="inline-block px-6 py-3 bg-gradient-to-r from-blue-500 to-blue-600 hover:from-blue-600 hover:to-blue-700 text-white rounded-lg cursor-pointer transition-all duration-300 transform hover:scale-105 shadow-lg"
              >
                Choose Files
              </label>
            )}
          </div>

          {/* Uploaded Files Display */}
          {documents.length > 0 && (
            <div className="mt-6 space-y-3">
              {documents.map((doc, index) => (
                <div key={index} className="flex items-center justify-between bg-white/90 backdrop-blur-sm rounded-lg p-4 border border-gray-200 shadow-sm">
                  <div className="flex items-center gap-3">
                    <FileText className="text-blue-600" size={20} />
                    <span className="font-medium text-gray-800">{doc.name}</span>
                    <span className="text-sm text-gray-500">({(doc.size / 1024 / 1024).toFixed(2)} MB)</span>
                  </div>
                  <button
                    onClick={() => removeDocument(index)}
                    className="px-3 py-1 text-red-600 hover:text-red-500 transition-colors font-medium"
                  >
                    Remove
                  </button>
                </div>
              ))}
            </div>
          )}
        </div>

        {/* Launch Button */}
        <div className="text-center mb-8">
          <button
            onClick={launchWorkflow}
            disabled={documents.length < 2 || isProcessing}
            className={`px-8 py-4 rounded-xl font-semibold text-lg transition-all duration-300 transform ${
              documents.length >= 2 && !isProcessing
                ? 'bg-gradient-to-r from-blue-500 to-blue-600 hover:from-blue-600 hover:to-blue-700 text-white hover:scale-105 shadow-lg hover:shadow-xl'
                : 'bg-gray-300 cursor-not-allowed opacity-50 text-gray-500'
            }`}
          >
            {isProcessing ? (
              <span className="flex items-center gap-3">
                <Loader className="animate-spin" size={20} />
                Processing Documents...
              </span>
            ) : (
              <span className="flex items-center gap-3">
                <Play size={20} />
                Launch Workflow
              </span>
            )}
          </button>
        </div>

        {/* Processing Animation */}
        {isProcessing && (
          <div className="mb-8 text-center">
            <div className="inline-flex items-center gap-2 px-6 py-3 bg-gradient-to-r from-blue-50 to-blue-100 rounded-full backdrop-blur-sm border border-blue-300 shadow-sm">
              <div className="flex gap-1">
                <div className="w-2 h-2 bg-blue-500 rounded-full animate-bounce"></div>
                <div className="w-2 h-2 bg-blue-600 rounded-full animate-bounce" style={{animationDelay: '0.1s'}}></div>
                <div className="w-2 h-2 bg-gray-600 rounded-full animate-bounce" style={{animationDelay: '0.2s'}}></div>
              </div>
              <span className="text-sm font-medium text-blue-700">Analyzing documents with AI...</span>
            </div>
          </div>
        )}

        {/* Output Section */}
        <div className="bg-white/90 backdrop-blur-lg rounded-2xl p-6 border border-gray-200 shadow-xl">
          <h3 className="text-xl font-semibold mb-4 flex items-center gap-3 text-gray-800">
            <FileText className="text-blue-500" size={24} />
            Analysis Results
          </h3>
          <div className="bg-gray-900 rounded-lg p-6 border border-gray-700 min-h-32">
            {output ? (
              <pre className="whitespace-pre-wrap text-gray-100 text-sm leading-relaxed">{output}</pre>
            ) : (
              <p className="text-gray-400 italic">Results will appear here after processing...</p>
            )}
          </div>
        </div>
      </div>
    </div>
  );
}
import React, { useState } from 'react';
import { Upload, Play, FileText, Zap, CheckCircle, Loader, X } from 'lucide-react';

export default function ParadigmScreeningInterface() {
  const [documents, setDocuments] = useState([]);
  const [uploadedDocumentIds, setUploadedDocumentIds] = useState([]);
  const [isProcessing, setIsProcessing] = useState(false);
  const [output, setOutput] = useState('');
  const [isDragOver, setIsDragOver] = useState(false);
  const [uploadStatus, setUploadStatus] = useState('');
  const [logs, setLogs] = useState([]);

  // API Configuration
  const API_BASE = '/api';

  // Utility function for logging
  const addLog = (message, type = 'info') => {
    const timestamp = new Date().toLocaleTimeString();
    setLogs(prev => [...prev, { timestamp, message, type }]);
    console.log(`[${timestamp}] ${message}`);
  };

  // Logged fetch wrapper for API calls
  const loggedFetch = async (url, options = {}, description = '') => {
    try {
      addLog(`üåê ${description}: ${options.method || 'GET'} ${url}`, 'info');
      const response = await fetch(url, {
        ...options,
        headers: {
          'Authorization': `Bearer YOUR_API_KEY_HERE`,
          ...options.headers
        }
      });
      
      let data = {};
      try {
        data = await response.json();
      } catch (e) {
        data = await response.text();
      }
      
      return { response, data };
    } catch (error) {
      addLog(`‚ùå Network error: ${error.message}`, 'error');
      throw error;
    }
  };

  // Upload files to backend and attach them to queries
  const uploadQueryFiles = async (files) => {
    const fileArray = Array.from(files).slice(0, 2 - documents.length);
    
    for (const file of fileArray) {
      try {
        setUploadStatus(`Uploading ${file.name}...`);
        addLog(`üì§ Uploading query attachment: ${file.name} (${file.size} bytes)`, 'info');
        
        const formData = new FormData();
        formData.append('file', file);
        formData.append('collection_type', 'private');
        
        const { response, data } = await loggedFetch(`${API_BASE}/files/upload`, {
          method: 'POST',
          body: formData
        }, `UPLOAD QUERY FILE: ${file.name}`);
        
        if (response.ok) {
          // Add to documents list with server data
          const documentData = {
            file,
            id: data.id,
            filename: data.filename,
            bytes: data.bytes,
            status: data.status
          };
          
          setDocuments(prev => [...prev, documentData]);
          setUploadedDocumentIds(prev => [...prev, data.id]);
          
          setUploadStatus(`‚úÖ ${file.name} attached to query!`);
          addLog(`‚úÖ Query file uploaded successfully: ID ${data.id}`, 'response');
          
        } else {
          setUploadStatus(`‚ùå Failed to upload ${file.name}`);
          addLog(`‚ùå Query upload failed: ${data.detail || 'Unknown error'}`, 'error');
        }
        
      } catch (error) {
        setUploadStatus(`‚ùå Network error uploading ${file.name}`);
        addLog(`‚ùå Query upload network error: ${error.message}`, 'error');
      }
    }
  };

  // Remove a file attachment from the current query
  const removeQueryFile = async (documentId, index) => {
    if (!window.confirm('Are you sure you want to remove this attachment?')) return;
    
    try {
      addLog(`üóëÔ∏è Removing query attachment ID: ${documentId}`, 'info');
      
      const { response, data } = await loggedFetch(`${API_BASE}/files/${documentId}`, {
        method: 'DELETE'
      }, `DELETE QUERY FILE: ${documentId}`);
      
      if (response.ok) {
        // Remove from documents array
        setDocuments(prev => prev.filter((_, i) => i !== index));
        setUploadedDocumentIds(prev => prev.filter(id => id !== documentId));
        
        addLog(`‚úÖ Query attachment removed: ID ${documentId}`, 'response');
        setUploadStatus('File removed successfully');
        
      } else {
        addLog(`‚ùå Remove attachment error: ${data.detail}`, 'error');
        setUploadStatus(`‚ùå Failed to remove file`);
      }
      
    } catch (error) {
      addLog(`‚ùå Remove attachment network error: ${error.message}`, 'error');
      setUploadStatus(`‚ùå Network error removing file`);
    }
  };

  // Cleanup uploaded documents after workflow testing
  const cleanupUploadedDocuments = async (documentIds) => {
    if (!documentIds || documentIds.length === 0) {
      return;
    }
    
    addLog(`üßπ Starting automatic cleanup of ${documentIds.length} test document(s)...`, 'info');
    
    let cleanupSuccessCount = 0;
    let cleanupFailCount = 0;
    
    for (const documentId of documentIds) {
      try {
        const { response } = await loggedFetch(`${API_BASE}/files/${documentId}`, {
          method: 'DELETE'
        }, `CLEANUP TEST DOCUMENT: ${documentId}`);
        
        if (response.ok || response.status === 404) {
          cleanupSuccessCount++;
          addLog(`üóëÔ∏è Test document ${documentId} deleted successfully`, 'response');
        } else {
          cleanupFailCount++;
          addLog(`‚ö†Ô∏è Failed to delete test document ${documentId} (status: ${response.status})`, 'error');
        }
      } catch (error) {
        cleanupFailCount++;
        addLog(`‚ö†Ô∏è Error deleting test document ${documentId}: ${error.message}`, 'error');
      }
    }
    
    if (cleanupSuccessCount > 0) {
      addLog(`‚úÖ Cleanup completed: ${cleanupSuccessCount} document(s) deleted from Paradigm`, 'response');
    }
    
    if (cleanupFailCount > 0) {
      addLog(`‚ö†Ô∏è Cleanup issues: ${cleanupFailCount} document(s) could not be deleted`, 'error');
    }
  };

  const handleFileUpload = (files) => {
    uploadQueryFiles(files);
  };

  const handleDragOver = (e) => {
    e.preventDefault();
    setIsDragOver(true);
  };

  const handleDragLeave = (e) => {
    e.preventDefault();
    setIsDragOver(false);
  };

  const handleDrop = (e) => {
    e.preventDefault();
    setIsDragOver(false);
    handleFileUpload(e.dataTransfer.files);
  };

  const removeDocument = (index) => {
    const document = documents[index];
    if (document.id) {
      removeQueryFile(document.id, index);
    } else {
      // For files not yet uploaded, just remove from local state
      setDocuments(prev => prev.filter((_, i) => i !== index));
    }
  };

  const launchWorkflow = async () => {
    if (documents.length < 2) {
      alert('Please upload 2 documents before launching the workflow.');
      return;
    }

    setIsProcessing(true);
    setOutput('');
    addLog('üöÄ Starting workflow processing...', 'info');

    try {
      const formData = new FormData();
      documents.forEach((doc, index) => {
        formData.append(`document${index + 1}`, doc.file);
      });

      const { response, data } = await loggedFetch(`${API_BASE}/process-documents`, {
        method: 'POST',
        body: formData
      }, 'PROCESS DOCUMENTS');

      if (response.ok) {
        setOutput(typeof data === 'string' ? data : JSON.stringify(data, null, 2));
        addLog('‚úÖ Workflow completed successfully', 'response');
        
        // Auto-cleanup uploaded documents after successful processing
        if (uploadedDocumentIds.length > 0) {
          setTimeout(() => {
            cleanupUploadedDocuments(uploadedDocumentIds);
          }, 2000); // Wait 2 seconds before cleanup
        }
      } else {
        throw new Error(`HTTP error! status: ${response.status} - ${data.detail || 'Unknown error'}`);
      }

    } catch (error) {
      const errorMessage = `Error processing documents: ${error.message}`;
      setOutput(errorMessage);
      addLog(`‚ùå ${errorMessage}`, 'error');
    } finally {
      setIsProcessing(false);
    }
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-gray-50 via-white to-gray-100 text-gray-900">
      {/* Animated background particles */}
      <div className="absolute inset-0 overflow-hidden">
        <div className="absolute w-96 h-96 bg-blue-500/10 rounded-full blur-3xl animate-pulse -top-20 -left-20"></div>
        <div className="absolute w-96 h-96 bg-gray-400/10 rounded-full blur-3xl animate-pulse -bottom-20 -right-20 animation-delay-2000"></div>
        <div className="absolute w-64 h-64 bg-blue-400/15 rounded-full blur-3xl animate-pulse top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 animation-delay-4000"></div>
      </div>

      <div className="relative z-10 container mx-auto px-6 py-8">
        {/* Header */}
        <header className="text-center mb-12">
          <div className="flex justify-between items-center mb-8">
            <div className="w-32 h-20 bg-gradient-to-r from-gray-100 to-white rounded-lg border border-gray-300 flex items-center justify-center backdrop-blur-sm shadow-lg">
              <span className="text-xs font-medium text-gray-700">LightOn Logo</span>
            </div>
            
            <h1 className="text-4xl md:text-6xl font-bold text-black">
              Paradigm Screening Use Case
            </h1>
            
            <div className="w-32 h-20 bg-gradient-to-r from-white to-gray-100 rounded-lg border border-gray-300 flex items-center justify-center backdrop-blur-sm shadow-lg">
              <span className="text-xs font-medium text-gray-700">YBAK Logo</span>
            </div>
          </div>
          
          <p className="text-lg md:text-xl text-gray-600 max-w-4xl mx-auto leading-relaxed">
            This is a demonstration of <span className="text-blue-600 font-semibold">Paradigm's capabilities and adaptability</span>, 
            designed to drive value creation by adapting to <span className="text-gray-800 font-semibold">YBAK specific needs</span> 
            through intelligent document analysis and processing.
          </p>
        </header>

        {/* Workflow Description */}
        <div className="mb-12 bg-white/90 backdrop-blur-lg rounded-2xl p-8 border border-gray-200 shadow-xl">
          <h2 className="text-2xl font-bold mb-6 flex items-center gap-3 text-gray-800">
            <Zap className="text-blue-500" size={28} />
            Workflow Overview
          </h2>
          <div className="grid md:grid-cols-3 gap-6 text-center">
            <div className="p-6 bg-gray-50 rounded-xl border border-gray-200 shadow-sm hover:shadow-md transition-shadow">
              <Upload className="mx-auto mb-3 text-blue-500" size={32} />
              <h3 className="font-semibold text-gray-800 mb-2">Document Upload</h3>
              <p className="text-sm text-gray-600">Upload two documents for comprehensive analysis and comparison</p>
            </div>
            <div className="p-6 bg-blue-50 rounded-xl border border-blue-200 shadow-sm hover:shadow-md transition-shadow">
              <Play className="mx-auto mb-3 text-blue-600" size={32} />
              <h3 className="font-semibold text-blue-800 mb-2">AI Processing</h3>
              <p className="text-sm text-gray-600">Advanced algorithms analyze content, extract insights, and generate recommendations</p>
            </div>
            <div className="p-6 bg-gray-900 rounded-xl border border-gray-700 shadow-sm hover:shadow-md transition-shadow">
              <CheckCircle className="mx-auto mb-3 text-white" size={32} />
              <h3 className="font-semibold text-white mb-2">Results Delivery</h3>
              <p className="text-sm text-gray-300">Receive detailed analysis with actionable insights tailored to your needs</p>
            </div>
          </div>
        </div>

        {/* Document Upload Section */}
        <div className="mb-8">
          <div 
            className={`border-2 border-dashed rounded-2xl p-8 text-center transition-all duration-300 backdrop-blur-sm ${
              isDragOver 
                ? 'border-blue-500 bg-blue-50' 
                : documents.length >= 2 
                  ? 'border-green-500 bg-green-50' 
                  : 'border-gray-300 bg-white/80 hover:border-blue-400 hover:bg-blue-50/50'
            }`}
            onDragOver={handleDragOver}
            onDragLeave={handleDragLeave}
            onDrop={handleDrop}
          >
            <Upload className={`mx-auto mb-4 ${isDragOver ? 'text-blue-500' : documents.length >= 2 ? 'text-green-500' : 'text-gray-400'}`} size={48} />
            <h3 className="text-xl font-semibold mb-2 text-gray-800">
              {documents.length >= 2 ? 'Documents Ready' : `Upload Documents (${documents.length}/2)`}
            </h3>
            <p className="text-gray-600 mb-4">Drag and drop files here or click to browse</p>
            
            <input
              type="file"
              multiple
              onChange={(e) => handleFileUpload(e.target.files)}
              className="hidden"
              id="file-upload"
              accept=".pdf,.doc,.docx,.txt"
              disabled={documents.length >= 2}
            />
            
            {documents.length < 2 && (
              <label 
                htmlFor="file-upload" 
                className="inline-block px-6 py-3 bg-gradient-to-r from-blue-500 to-blue-600 hover:from-blue-600 hover:to-blue-700 text-white rounded-lg cursor-pointer transition-all duration-300 transform hover:scale-105 shadow-lg"
              >
                Choose Files
              </label>
            )}
          </div>

          {/* Upload Status */}
          {uploadStatus && (
            <div className="mt-4 p-4 bg-blue-50 border border-blue-200 rounded-lg">
              <p className={`text-sm font-medium ${
                uploadStatus.includes('‚ùå') ? 'text-red-600' : 
                uploadStatus.includes('‚úÖ') ? 'text-green-600' : 'text-blue-600'
              }`}>
                {uploadStatus}
              </p>
            </div>
          )}

          {/* Uploaded Files Display */}
          {documents.length > 0 && (
            <div className="mt-6 space-y-3">
              {documents.map((doc, index) => (
                <div key={index} className="flex items-center justify-between bg-white/90 backdrop-blur-sm rounded-lg p-4 border border-gray-200 shadow-sm">
                  <div className="flex items-center gap-3">
                    <FileText className="text-blue-600" size={20} />
                    <div>
                      <div className="font-medium text-gray-800">{doc.filename || doc.file?.name}</div>
                      <div className="text-sm text-gray-500">
                        {doc.bytes ? `${(doc.bytes / 1024 / 1024).toFixed(2)} MB` : 
                         doc.file ? `${(doc.file.size / 1024 / 1024).toFixed(2)} MB` : 'Unknown size'}
                        {doc.id && ` ‚Ä¢ ID: ${doc.id}`}
                        {doc.status && ` ‚Ä¢ Status: ${doc.status}`}
                      </div>
                    </div>
                  </div>
                  <button
                    onClick={() => removeDocument(index)}
                    className="p-2 text-red-600 hover:text-red-800 hover:bg-red-50 rounded-lg transition-all duration-200"
                    title="Remove attachment"
                  >
                    <X size={18} />
                  </button>
                </div>
              ))}
            </div>
          )}
        </div>

        {/* Launch Button */}
        <div className="text-center mb-8">
          <button
            onClick={launchWorkflow}
            disabled={documents.length < 2 || isProcessing}
            className={`px-8 py-4 rounded-xl font-semibold text-lg transition-all duration-300 transform ${
              documents.length >= 2 && !isProcessing
                ? 'bg-gradient-to-r from-blue-500 to-blue-600 hover:from-blue-600 hover:to-blue-700 text-white hover:scale-105 shadow-lg hover:shadow-xl'
                : 'bg-gray-300 cursor-not-allowed opacity-50 text-gray-500'
            }`}
          >
            {isProcessing ? (
              <span className="flex items-center gap-3">
                <Loader className="animate-spin" size={20} />
                Processing Documents...
              </span>
            ) : (
              <span className="flex items-center gap-3">
                <Play size={20} />
                Launch Workflow
              </span>
            )}
          </button>
        </div>

        {/* Processing Animation */}
        {isProcessing && (
          <div className="mb-8 text-center">
            <div className="inline-flex items-center gap-2 px-6 py-3 bg-gradient-to-r from-blue-50 to-blue-100 rounded-full backdrop-blur-sm border border-blue-300 shadow-sm">
              <div className="flex gap-1">
                <div className="w-2 h-2 bg-blue-500 rounded-full animate-bounce"></div>
                <div className="w-2 h-2 bg-blue-600 rounded-full animate-bounce" style={{animationDelay: '0.1s'}}></div>
                <div className="w-2 h-2 bg-gray-600 rounded-full animate-bounce" style={{animationDelay: '0.2s'}}></div>
              </div>
              <span className="text-sm font-medium text-blue-700">Analyzing documents with AI...</span>
            </div>
          </div>
        )}

        {/* Output Section */}
        <div className="bg-white/90 backdrop-blur-lg rounded-2xl p-6 border border-gray-200 shadow-xl mb-8">
          <h3 className="text-xl font-semibold mb-4 flex items-center gap-3 text-gray-800">
            <FileText className="text-blue-500" size={24} />
            Analysis Results
          </h3>
          <div className="bg-gray-900 rounded-lg p-6 border border-gray-700 min-h-32">
            {output ? (
              <pre className="whitespace-pre-wrap text-gray-100 text-sm leading-relaxed">{output}</pre>
            ) : (
              <p className="text-gray-400 italic">Results will appear here after processing...</p>
            )}
          </div>
        </div>

        {/* Activity Logs */}
        {logs.length > 0 && (
          <div className="bg-white/90 backdrop-blur-lg rounded-2xl p-6 border border-gray-200 shadow-xl">
            <h3 className="text-xl font-semibold mb-4 flex items-center gap-3 text-gray-800">
              <FileText className="text-blue-500" size={24} />
              Activity Logs
            </h3>
            <div className="bg-gray-900 rounded-lg p-4 max-h-48 overflow-y-auto">
              {logs.slice(-10).map((log, index) => (
                <div key={index} className={`text-sm mb-2 ${
                  log.type === 'error' ? 'text-red-400' :
                  log.type === 'response' ? 'text-green-400' :
                  'text-gray-300'
                }`}>
                  <span className="text-gray-500 text-xs">[{log.timestamp}]</span> {log.message}
                </div>
              ))}
            </div>
          </div>
        )}
      </div>
    </div>
  );
}